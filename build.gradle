plugins {
	id "fabric-loom" version "${loom_version}"
	id "maven-publish"
	id "com.modrinth.minotaur" version "2.+"
}

version = project.version
group = project.group

base {
	archivesName = project.id
}

repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		name = "Ladysnake Libs"
		url = "https://maven.ladysnake.org/releases"
	}

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}

		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"${project.id}" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	// Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// Yarn
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	["fabric-entity-events-v1", "fabric-rendering-v1"].each {
		module -> modImplementation(fabricApi.module(module, project.fabric_api_version))
	}
	modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}" // Required for testing because Trinkets expects "fabric-api" to be present.

	// Trinkets Canary
	modImplementation "maven.modrinth:trinkets-canary:${project.trinkets_api_version}"

	// Cardinal Components API
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${cca_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("*.json") {
		expand project.properties
	}
}

processClientResources {
	inputs.property "version", project.version

	filesMatching("*.json") {
		expand project.properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = project.java_version as Integer
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.valueOf("VERSION_${project.java_version}")
	targetCompatibility = JavaVersion.valueOf("VERSION_${project.java_version}")
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.id}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.id
			from components.java
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = project.modrinth_id
	versionName = "Elytra Trinket v${project.version}"
	uploadFile = remapJar
	additionalFiles = [sourcesJar]
	dependencies {
		required.project "fabric-api"
		required.project "trinkets-canary"
	}
	syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
